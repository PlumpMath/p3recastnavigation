USAGE NOTES
***********
p3Recastnavigation is an attempt to make available the RecastNavigation library 
facilities to the Panda3d engine. 

It is not a "one-to-one" export/porting of the RecastNavigation functionalities,
but a synthesis of objects and methods which exploit the library to exhibit 
features that deal with general concepts such as points, paths, areas, links, 
walking abilities etc., trying to avoid references to specific elements of 
the library, such as polygons, corridors, filters, queries, nodes etc..
In summary, p3Recastnavigation would like to make available to any programmer, 
functionalities of path finding without the need (to a certain extent) to learn 
the peculiar concepts of the underlying RecastNavigation library.
To achieve this, it followed the approach used by the comprehensive RecastDemo
application, exploiting much of its code and adapting it to the Panda3D world.

In addition to reading this document, please also refer to the API 
documentation (c++ only) that can be generated with doxygen:

  doxygen Doxyfile 

Moreover, it would help to refer to the original documentation and forums of 
RecastNavigation (https://github.com/RecastNavigation/RecastNavigation):
- Discuss Recast & Detour: http://groups.google.com/group/RecastNavigation
- Development blog: http://digestingduck.blogspot.com/
- API documentation that can be generated with doxygen using the "Doxygen" file 
  located in the root of the source code:
  
   doxygen Doxyfile
   
Finally, and very importantly, it is highly recommended to play with the 
comprehensive RecastDemo application for experimenting and becoming familiar 
with the concepts of RecastNavigation.

Framework
---------
p3Recastnavigation distinguishes various objects and elements to work with:

- RNNavMeshManager: this is a unique object (singleton) whose main task is to 
create/destroy RNNavMeshes and RNCrowdAgents

- RNNavMesh: is a PandNode representing the navigation mesh on which they move 
the RNCrowdAgents

- Owner Object: is a NodePath representing a Panda3D model (static) for which 
a navigation mesh is created; an owner object can "own" several RNNavMeshes

- RNCrowdAgent: is a PandNode representing a crowd agent that moves along the 
owner object to reach the target by following the paths tracked down thanks to 
the navigation mesh; NodePaths of 3d models are usually attached to a 
RNCrowdAgent

- Convex Volumes: these represents specific areas of a navigation mesh that 
could have distinct properties from the rest of the mesh

- Off mesh connections: represent one-dimensional links between disjointed 
regions of the navigation mesh, possibly having also distinct properties

- Area types, flags and costs: these are the elements that allow you to set the 
properties of convex volumes and off mesh connections, affecting even 
dynamically, the choice of paths that agents make to go towards their targets

Placement of objects in the scene
---------------------------------
To make possible the simultaneous use of the various features of the module 
(and also for the integration with other Panda3d features), it was chosen this 
model of placement of the various elements in the scene:

- Reference NodePath: this node is the root under which objects are attached 
  and with respect to which points, distances and movements  are computed; the 
  RNNavMeshManager provides a default reference node;
  
- placement of RNNavMesh, RNCrowdAgent: at the time of creation, they are 
  automatically attached to the default reference NodePath (and to which they 
  have an internal reference); to the RNCrowdAgent(s) can be subsequently 
  attached 3d models;

- placement of Owner Object: this object should be attached manually to the 
  reference node too, especially to allow you to manage various transformations: 
  translation, rotation (along the axis z - heading), (uniform) scaling.

Once attached objects to the reference NodePath, just reparent this to the scene
(usually under the "render" node).

NOTE: Except for the owner object, no transform should be applied to the other 
objects (except the identity one of course).

Other positioning schemes may work but they have not been tested. 
NOTE: if you change the reference NodePath don't forget to set RNNavMeshes' and
RNCrowdAgents' internal reference and to reparent them to it. 

RNNavMeshManager
----------------
The manager is a singleton that can be retrieved through get_global_ptr() method
(static in c++). 
It manages the creation and destruction of any RNNavMesh and RNCrowdAgent, 
maintaining lists of all these created objects, so they can be retrieved at any 
time.

The manager also has the task to set the many parameters to default values 
during these objects' creation. 
In this regard, a method has been made available for specifying these parameters
in textual mode, the syntax of which is specified in the doxygen documentation 
of RNNavMesh and RNCrowdAgent classes. This was done to ease the creation of 
objects in a "data driven" way, that is, for example, by reading parameters from
an xml configuration file. 
For this purpose various methods are provided, that is, those with names like 
"set_parameter*()" or "get_parameter*()".

In addition, the manager is provided with some other utilities: 
- to find the dimensions of the used models (get_bounding_dimensions()) 
- to manage the collisions with the models (get_collision_traverser(), 
  get_collision_ray() etc...); these are used internally, for example for 
  kinematic RNCrowdAgents, but can be used for general purposes toot(see 
  samples).
- to perform a default update (start/stop_default_update()), that is a task 
  which calls all of the RNNavMeshes' update methods, with no possibility of 
  interaction (usually it is used for test purposes).
- to write/read to/from "bam" files the objects of (part of) a scene having its 
  root as the default reference NodePath (write_to/read_from_bam_file()).
  
RNNavMesh
---------
This object embodies the capabilities of the underlying RecastNavigation 
navigation mesh.

A RNNavMesh can only be used after it is initially associated with an "owner 
object" (a 3D model consisting of triangle mesh) through set_owner_node_path() 
method, and then assembled by calling the setup() method.

A RNNavMesh can be either of type "SOLO" or "TILE" or "OBSTACLE" (see 
RNNavMeshTypeEnum).

To change some structural settings/elements (including owner object, type, 
convex volumes and off mesh connections), an RNNavMesh must be in a "un-setup" 
or "clean" state. To apply these structural characteristics it is necessary to 
call the setup() method that brings the RNNavMesh in a "setup" state. 
Then, to allow further changes several times during the RNNavMesh's life time,  
the method cleanup() should be called to return in the "un-setup" state. 

Note that an RNNavMesh "remembers" structural characteristics along with the 
added RNCrowdAgent(s) and obstacles (in case of OBSTACLE type).

An RNNavMesh is generally associated with a crowd of RNCrowdAgent(s), which share
many features like flags and crossing-costs of the area types, and 
include/exclude flags for the same area types (see RNNavMeshPolyAreasEnum, 
RNNavMeshPolyFlagsEnum). 
To allow RNCrowdAgent(s) to find the paths and go to their targets, you must 
create a task that at every tick of the game loop (frame), calls the update() 
method of the RNNavMesh.

For a complete overview of the methods (ie member functions) that can be used 
with a RNNavMesh, see the API documentation generated from doxygen, where these 
have been grouped by similar functionality.

NOTE: Once you create a NavMesh, its methods can be always called: they always 
return, where applicable, a valid value without emitting exceptions (except core
ones as "out of memory" etc) but note that some of them take effect only if 
called "before" the setup, others only if called "after" the setup, and still 
others may be called before but their effect will only be visible to the next 
setup (see documentation for details).

NOTE: The underlying navigation mesh has as construction parameters, among 
others, also the size (and the "climb" and "slope" capacity) of the crowd 
agents, so strictly speaking, one RNNavMesh is only suitable for agents of a 
given size; but in p3recastnavigation (such as in RecastDemo) this requirement 
is relaxed, and agents of different sizes are allowed for the same mesh, but it 
is advised to use agents with slightly different dimensions. If you want to 
follow strictly the requirement, it is necessary to add to the owner object more
RNNavMesh(es), one for each size.

RNCrowdAgent
------------
This object embodies the capabilities of the underlying RecastNavigation crowd 
agent.

An RNCrowdAgent can live alone doing nothing, or be "added" to an RNNavMesh in 
order to accomplish his goal of reaching its target following the path found 
thanks to that RNNavMesh.

An RNCrowdAgent can be of two types:
- "recast" its position closely follows the path defined on the underlying 
navigation mesh,
- "kinematic": the position is adjusted (within a certain extent) in such a way 
that it is always on the surface of the 3d model of the owner object.
This feature has been introduced since the surfaces of the navigation mesh and 
the 3d model generally, differ slightly (this difference is higher in the case 
of RNNavMesh of type OBSTACLE).

RNCrowdAgent(s), if properly enabled, can throw events, for which it can be 
established a firing frequency. Currently, there are only defined 2 events 
- "move": when the RNCrowdAgent moves, it is continuously issued
- "steady": thrown as soon as the RNCrowdAgent stops.

For each RNCrowdAgent you can set/get the configuration and motion parameters 
and retrieve its current movement state.

For a complete overview of the methods (ie member functions) that can be used 
with a RNNavMesh, see the API documentation generated from doxygen, where these 
have been grouped by similar functionality.

Convex Volumes and Off Mesh Connections
---------------------------------------
Convex volumes are used to demarcate areas of the navigation mesh. 
Off Mesh Connections instead, allow to go from one point to another, also placed
into disjoint zones, as in a teleport, with the limitation (imposed by 
RecastNavigation) that they must be located in adjacent tiles.

Both convex volumes and off mesh connections define areas (off mesh connections
are considered one-dimensional areas) with generally different characteristics 
from the rest of the navigation mesh. Them can be added/deleted only before the
RNNavMesh setup, while their characteristics can also be modified at run time. 
In this regard, see the related methods of RNNavMesh.

Area, flags, cost
-----------------
The "area" types are used to distinguish the features of different kind of zones
(definable through convex volumes and off mesh connections), while the 
"flags" and the "cost" are used to define the capabilities and the effort, 
respectively, of walking on these types of area. These elements along with 
the include/exclude flags of the RNCrowdAgent(s), are used by 
RecastNavigation to find the best path used by RNCrowdAgent(s) to go towards 
their targets.
For example an RNCrowdAgent that has include flags of "walk" and "swim" and 
exclude flag of "door" can walk on area  of type "ground" and "water" but not 
cross "door"s, and also it prefers the paths with the lower walking total cost.

NOTE: the exclude flag takes precedence on include flag.

NOTE: p3recastnavigation defines by default, the same area types and flags of 
RecastDemo, but allows you to define more in addition to the previous (it is 
not advisable to redefine the defaults because some of these values ​​are hard 
coded in the support code).

Debug Drawing
-------------
The debug drawing is available by enabling its support when p3recastnavigation 
module is built, that is by setting the value of "optimize" equal to 1 or 2 
(debug build) in the file "config.ini".

The RNNavMeshManager provides a "reference NodePath for debug", which can be 
retrieved with a call to get_reference_node_path_debug(). To enable debug 
drawing in the code, you need to make it sibling of the reference NodePath (that
is attached to the same parent), and then utilize the debugging methods of 
RNNavMesh (see API documentation).

NOTE: RNNavMeshManager also provides methods to draw low-level primitives: 
points, lines, triangles and quads, and this can be useful during development 
and testing.

Samples
-------
To become familiar with p3Recastnavigation programming, see also th code of the 
samples (both in python and c++) in the 'samples' folder:

- "basic" it is a minimum example of p3Recastnavigation usage.
- "test1" shows ways on how to define convex volumes and off mesh connections, 
  to change their characteristics (changing the flags to enable/disable in this 
  case) and to cycle between setup()/cleanup() of a RNNavMesh. 
- "test2" shows the use of features: setting of creation parameters, 
  integration with Panda3d objects, custom update, management of obstacles, 
  event throwing, serialization (that is read/write to/from BAM files).
